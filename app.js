// Generated by CoffeeScript 1.6.3
var ServerStatus, ServerStatusEmitter, app, dgram, dgramsocket, events, express, http, io, path, server, setCapacity, setPopulation, setUp;

express = require('express');

http = require('http');

path = require('path');

events = require('events');

dgram = require("dgram");

app = express();

server = http.createServer(app);

io = require("socket.io").listen(server);

io.enable('browser client minification');

if (require('os').type() !== 'Windows_NT') {
  io.enable('browser client gzip');
}

io.enable('browser client etag');

ServerStatus = {
  up: false,
  capacity: 0,
  population: 0
};

ServerStatusEmitter = new events.EventEmitter;

app.set('port', process.env.PORT || 3000);

app.set('views', __dirname + '/views');

app.set('view engine', 'jade');

app.use(express.favicon());

app.use(express.logger('dev'));

app.use(express.bodyParser());

app.use(express.methodOverride());

app.use(app.router);

app.use(require("connect-coffee-script")({
  src: __dirname + "/public",
  bare: true,
  sourceMap: true
}));

app.use(require('less-middleware')({
  src: __dirname + '/public'
}));

app.use(express["static"](path.join(__dirname, 'public')));

if ('development' === app.get('env')) {
  app.use(express.errorHandler());
}

app.get('/', function(req, res) {
  return res.render('index', {
    enabled: ServerStatus.up,
    population: ServerStatus.population,
    capacity: ServerStatus.capacity
  });
});

dgramsocket = dgram.createSocket('udp4');

dgramsocket.on('message', function(contents) {
  var data, message;
  message = contents[0];
  data = contents[1];
  switch (message) {
    case 0:
      setUp(true);
      return setCapacity(data);
    case 1:
      return setUp(false);
    case 2:
      return setPopulation(data);
  }
});

dgramsocket.bind(12823);

io.sockets.on('connection', function(socket) {
  ServerStatusEmitter.on('setUp', function(isUp) {
    return socket.emit('server status changed', isUp);
  });
  ServerStatusEmitter.on('setCapacity', function(capacity) {
    return socket.emit('capacity', capacity);
  });
  return ServerStatusEmitter.on('setPopulation', function(population) {
    return socket.emit('population', population);
  });
});

setUp = function(isUp) {
  var hadListeners;
  ServerStatus.up = isUp;
  hadListeners = ServerStatusEmitter.emit('setUp', isUp);
  return setPopulation(0);
};

setCapacity = function(capacity) {
  ServerStatus.capacity = capacity;
  return ServerStatusEmitter.emit('setCapacity', capacity);
};

setPopulation = function(population) {
  ServerStatus.population = population;
  return ServerStatusEmitter.emit('setPopulation', population);
};

server.listen(app.get('port'), function() {
  return console.log('Express server listening on port ' + app.get('port'));
});
